version: 2



jobs:
  
  plan-apply:
    working_directory: ~/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            echo ssh key is ${SSH_BIG_APP}
            cd terraform
            terraform init -input=false
            terraform plan  
      - persist_to_workspace:
          root: .
          paths: 
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd terraform
            terraform apply -auto-approve 
            terraform output -raw instance_pub_ip
      - run:
          name: dockerize
          command: |
            
            cd terraform
  
            echo ip is:$(terraform output -raw instance_pub_ip)
            scp -i pipe_ssh -o "StrictHostKeyChecking no" pipe_ssh ubuntu@54.172.187.209:/home/ubuntu
            ssh -i pipe_ssh -o "StrictHostKeyChecking no" ubuntu@54.172.187.209 'bash -s' <<'ENDSSH'
              chmod 400 pipe_ssh
              ssh -i pipe_ssh -o "StrictHostKeyChecking no" git@github.com 
             
              git clone git@github.com:Kura-Team-6/pipe-in-a-pipe.git
              cd pipe-in-a-pipe
              git remote set-url origin git@github.com:Kura-Team-6/pipe-in-a-pipe.git
              cd pipe-in-a-pipe
              git checkout working
              cd client
              docker build -t react-container .
              cd ..
              cd backend-flask
              docker build -t flask-container .
              docker run -d react-container flask-container 

            ENDSSH 

      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy 
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve 

workflows:
  version: 2
  plan_approve_apply:
    jobs:
      - plan-apply
      # - hold-apply:
      #     type: approval
      #     requires:
      #       - plan-apply
      - apply:
          requires:
            - plan-apply
#       - plan-destroy:
#           requires:
#             - apply
#       - hold-destroy:
#           type: approval
#           requires:
#             - plan-destroy
#       - destroy:
#           requires:
#             - hold-destroy
